#!/usr/bin/env lua5.2
-- :mode=lua: --

package.path = package.path .. ";lib/?.lua;lib/?/init.lua"

require "util"
local res = require "ss1.res"
local map = require "ss1.map"
local gamesys = require "ss1.gamesys"
local pretty = require "ss1.map.pretty"
local names = require "ss1.names"

flags.register("help", "h", "?") {
  help = "display this text";
}

flags.register("res", "r") {
  help = "use this resfile as input";
  type = flags.string;
}

flags.register("prefix", "p") {
  help = "directory to save maps to and load templates from";
  type = flags.string;
  default = ".";
}

flags.register("html-only") {
  help = "generate a new view page but do not update level data";
}

flags.register("html-file", "o") {
  help = "save view page under this name (default is map.html)";
  type = flags.string;
  default = "map.html";
}

flags.register("levels", "l") {
  help = "include only these levels in the output (default is to include all)";
  type = flags.list;
  default = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
}

local output = {}

local function point(layer, x, y, colour, id)
  table.insert(output, "point(%d, %f, %f, '%s', '%d');" % {
    layer, x, y, colour, id })
end

local function line(x1, y1, x2, y2, colour)
  table.insert(output, "line(%f, %f, %f, %f, '%s');" % {
    x1, y1, x2, y2, colour })
end

local function arrow(x, y, dir, colour)
  table.insert(output, "arrow_%s(%f, %f, '%s');" % {
    dir, x, y, colour})
end

local function objectinfo(index, obj)
  local buf = {}
  for _,info in ipairs(pretty.object(obj)) do
    if type(info.value) == "table" then
      table.insert(buf, '[%q,["%s"]]' % {
        info.key,
        table.concat(info.value, '","')
      })
    else
      table.insert(buf, "[%q,%q]" % { info.key, tostring(info.value) })
    end
  end

  return [[ "%d": [%s] ]] % { index, table.concat(buf, ",") }
end

-- Generate the tile info structure for a given map.
-- The tile info is a JS map where the keys are "x,y" strings and the values
-- are lists of [key,value] pairs in the order they are to be displayed in.
local function tileinfo(map)
  local tiles = {}
  local template = '"%d,%d": [%s]'

  for x,y,tile in map:tiles() do
    local buf = {}
    for _,info in ipairs(pretty.tile(tile, x, y)) do
      table.insert(buf, '[%q,%q]' % { info.key, info.value })
    end
    table.insert(tiles, template % { x, y, table.concat(buf, ",") })
  end

  return table.concat(tiles, ",\n    ")
end

local function commit()
  local buf = table.concat(output, "\n    ")
  output = {}
  return buf
end

local function drawLedgeOrWall(x, y, x2, y2, delta)
  if delta == 0 then
    return
  elseif delta < math.huge then
    line(x, y, x2+1, y2+1, "#00%02X00" % (0x40 + delta*4))
  else
    line(x, y, x2+1, y2+1, "#00FF30")
  end
end

local function drawDiagonalWall(x, y, tile)
  if tile.shape == 2 or tile.shape == 4 then -- / diagonal
    line(x, y, x+1, y+1, "#00FF30")
  elseif tile.shape == 3 or tile.shape == 5 then -- \ diagonal
    line(x+1, y, x, y+1, "#00FF30")
  end
end

local function drawSlope(x, y, tile)
  slopes = {
    nil, nil, nil, nil, nil,
    "n", "e", "s", "w",
    "nw", "ne", "se", "sw",
    "se", "sw", "nw", "ne",
  }
  if slopes[tile.shape] then
    if tile.flags.slope == 3 then -- ceiling slope only
      arrow(x, y, slopes[tile.shape], "#303030")
    else -- floor slope
      arrow(x, y, slopes[tile.shape], "#004000")
    end
  end
end

local function drawTiles(map)
  for x,y,tile in map:tiles(1,1) do
    for x2,y2 in pairs { [x] = y-1, [x-1] = y } do
      local delta = map:ledgeHeight(x, y, x2, y2)
      drawLedgeOrWall(x, y, x2, y2, delta)
    end
    drawDiagonalWall(x, y, tile)
    drawSlope(x, y, tile)
  end
end

local function drawObjects(map)
  local colours = {
    "#FF0000", "#FF8080", "#FFFFFF", "#FF0080", -- weapons, ammo, projectiles, and explosives
    "#00FFFF", -- patches
    "#0000FF", "#0000FF", -- hardware and software
    "#FFFFFF", "#FFFFFF", -- scenery and trash
    "#808000", "#FFFF00", -- switches and doors
    "#FFFFFF", "#FFFFFF", "#A0A0A0", -- decorations, traps and containers
    "#800080" -- enemies
  }

  local objects = {}

  for i,obj in ipairs(map.objects) do
    objects[i] = objectinfo(i, obj)

    if colours[obj.class+1] then
      point(
        obj.class,
        obj.x,
        obj.y,
        colours[obj.class+1],
        i)
    end

    -- FIXME is there a specific subclass for non-openable gratings and stuff?
    if obj.class == 10 then -- openable doors
      if obj.pitch == 0 then
        if obj.yaw % 128 == 64 then
          line(obj.x, obj.y - 0.5, obj.x, obj.y + 0.5, "#FFFF00")
        else
          line(obj.x - 0.5, obj.y, obj.x + 0.5, obj.y, "#FFFF00")
        end
      else
        point(obj.class, obj.x, obj.y, '#FFFF00', i)
      end
    end
  end

  return objects
end

local function main(...)
  local opts = flags.parse(...)
  local levels = flag.levels
  local prefix = flag.prefix
  local index = {}

  if flag.help then
    return flags.help()
  end

  print("Loading templates...")
  local html = io.readfile("%s/template.html" % prefix)
  local js = io.readfile("%s/template.js" % prefix)

  print("Loading ARCHIVE.DAT...")
  local rf = assert(res.load(flags.require "res"))

  io.write("Processing levels:")
  for i,level in ipairs(levels) do
    io.write(" "..level)
    io.flush()
    level = tonumber(level)
    assert(level and level >= 0 and level <= 15, "invalid level index")

    if flag.html_only then
      table.insert(index, { level = level, name = names.levels[level] })
    else
      map = map.load(rf, level)
      table.insert(index, map)

      drawTiles(map)
      local objects = drawObjects(map)

      local data = {
        INDEX = level;
        BASENAME = tostring(level);
        WIDTH = map.info.width;
        HEIGHT = map.info.height;
        SCALE = 16;
        TILE_INFO = tileinfo(map);
        OBJECT_INFO = table.concat(objects, ",\n    ");
        WALLS = commit();
        LEVEL_TITLE = map.name;
      }
      io.writefile(prefix .. "/" .. level .. ".js", js:interpolate(data))
    end
  end
  print()

  -- write map.html
  print("Writing " .. flag.html_file)
  io.writefile(prefix .. "/" .. flag.html_file, html:interpolate {
    DEFAULT_LEVEL = index[1].level;
    ALL_LEVELS = table.concat(table.mapv(index, function(map) return "%d: true" % map.level end), ",");
    LEVEL_SELECT = table.concat(
      table.mapv(
        index,
        function(map)
          return '<option value="%d">%02d - %s</option>'
            % { map.level, map.level, map.name } end),
      "\n            ");
  })
end

return main(...)
