#!/usr/bin/env luajit
-- :mode=lua: --

if jit then
  jit.off()
  bit32 = bit
end

package.path = "deps/?.lua;deps/?/init.lua;" .. package.path

require "util"
local res = require "ss1.res"

flags.register("help", "h", "?") {
  help = "display this text";
  key = "mode"; value = "help";
  exclusive = true;
  default = "help";
}

flags.register("list", "l") {
  help = "list resfile contents";
  key = "mode"; value = "list";
}

flags.register("extract", "x") {
  help = "extract resfile contents";
  key = "mode"; value = "extract";
}

flags.register("decompress", "d") {
  help = "decompress a resfile";
  key = "mode"; value = "decompress";
}

flags.register("update", "u") {
  help = "update resfile contents";
  key = "mode"; value = "update";
}

flags.register("res", "r") {
  help = "use this resfile as input";
  type = flags.string;
}

flags.register("out", "o") {
  help = "output to this file when decompressing or updating";
  type = flags.string;
}

flags.register("prefix", "p") {
  help = "directory to save chunks in (extract) or read chunks from (update)";
  type = flags.string;
  default = ".";
}

flags.register("in-place", "i") {
  help = "modify the resfile in-place (for update and decompress)";
}

flags.register("subchunks") {
  help = "extract subchunks into directories";
}

flags.register("hex-ids", "X") {
  help = "name extracted files using hexadecimal rather than base-10 IDs";
  key = "idformat"; value = "x%04X";
  default = "%05d";
}

local mode = {}

local function extension(meta)
  if meta.typename ~= "unknown" then
    return "ss1"..meta.typename
  else
    return "ss1x%02X" % meta.type
  end
end

local function filename(meta)
  return ('%s/'..flag.idformat..".%s") % { flag.prefix, meta.id, extension(meta) }
end

-- List
function mode.list(...)
  local file = flags.require "res"
  local rf = res.load(file)

  printf("Comment: %s\n", rf.comment)
  --printf("File contains %u chunks\n", rf.count)

  printf("   id    size      type  packed   dir\n")
  for meta in rf:ls() do
    printf(flag.idformat .. "  %6u  %8s  %6s  %4s\n",
      meta.id,
      meta.size,
      meta.typename,
      meta.compressed and tostring(meta.packed_size) or "",
      meta.compound and tostring(#rf:read(meta.id)+1) or "")
  end
end

-- eXtract
function mode.extract(...)
  local file = flags.require "res"
  local rf = res.load(file)

  for meta,data in rf:contents(...) do
    if meta.compound and flag.subchunks then
      local dir = filename(meta)
      require("lfs").mkdir(dir)
      for index=0,#data do
        io.writefile(("%s/"..flag.idformat) % { dir, index }, data[index])
      end
    else
      io.writefile(filename(meta), data)
    end
  end
end

-- Update
function mode.update(...)
  local infile = flags.require "res"
  local outfile = flag.in_place and infile or flag.out or error("--update requires both --res and --out")
  local prefix = flag.prefix
  local rf = res.load(infile)

  for _,id in ipairs {...} do
    rf:write(id, io.readfile(filename(rf:stat(id))))
  end

  rf:save(outfile)
end

function mode.decompress()
  local infile = flags.require "res"
  local outfile = flag.in_place and infile or flag.out or error("--decompress requires both --res and --out")
  local rf = res.load(infile)
  for meta,data in rf:contents() do
    if meta.compressed then
      rf:write(meta.id, data)
    end
  end
  rf:save(outfile)
end

mode.help = flags.help

local function main(...)
  flag = flags.parse {...}
  if flag.mode == 'help' then
    print('Usage: res (-d|-x|-l|-u) [-Xi] [-p prefix] [-r resfile] [-o outfile] [chunks...]\n')
    print(flags.help())
    return 0
  end
  for i,chunk in ipairs(flag) do
    flag[i] = assert(tonumber(flag[i]),
      "can't convert argument '%s' into a resource ID -- did you mean to use --res?" % flag[i])
  end
  return mode[flag.mode](unpack(flag))
end

return main(...)
