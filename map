#!/usr/bin/env lua5.2
-- :mode=lua: --

require "util"
local res = require "res"
local map = require "map"

local HELP_TEXT = [[
Usage: map <archive> <prefix> [levels...]

    <archive> is the path to ARCHIVE.DAT.
    <prefix> is the prefix for the generated map files; the map for
    level N will be named prefixNN.html.
    <levels> is a list of level numbers, from 0 to 15; if omitted,
    all levels will be mapped. (Level 0 is Deck R; levels 1-9 are
   	the corresponding decks, and 10-15 are cyberspace and groves)
]]


local function emitTile(lines, map, x, y)
	local tile = map:tile(x,y)
	if tile.shape == 2 or tile.shape == 4 then -- / diagonal
		table.insert(lines, "      line(%d, %d, %d, %d, '#00FF00');\n" % { x+1, y, x, y+1 })
	elseif tile.shape == 3 or tile.shape == 5 then -- \ diagonal
		table.insert(lines, "      line(%d, %d, %d, %d, '#00FF00');\n" % { x, y, x+1, y+1 })
	end

	if x > 0 and y > 0 then
		if map:ledgeHeight(x, y, x-1, y) > 0 then
			local shade = math.min(0xFF, 0x40 + map:ledgeHeight(x, y, x-1, y) * 0x60)
			table.insert(lines, "      line(%d, %d, %d, %d, '#00%02X00');\n" % { x, y, x, y+1, shade })
		end
		if map:ledgeHeight(x, y, x, y-1) > 0 then
			local shade = math.min(0xFF, 0x40 + map:ledgeHeight(x, y, x, y-1) * 0x60)
			table.insert(lines, "      line(%d, %d, %d, %d, '#00%02X00');\n" % { x, y, x+1, y, shade })
		end
	end
end

local function main(archive, prefix, ...)
	local levels = {...}

	if not prefix then
		print(HELP_TEXT)
		return
	end

	if #levels == 0 then
		levels = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
	end

	print("Loading template...")
	local html = io.open("map.html"):read("*a")

	print("Loading ARCHIVE.DAT...")
	local rf = res.load(archive)

	for _,level in ipairs(levels) do
		local lines = {}
		level = tonumber(level)
		assert(level and level >= 0 and level <= 15, "invalid level index")

		print("Writing level " .. level)
		map = map.load(rf, level)

		for y=0,map.info.height-1 do
			for x=0,map.info.width-1 do
				emitTile(lines, map, x, y)
				--printf(icons[level:tile(x,y).shape])
			end
			--print()
		end

		local fd = assert(io.open(prefix .. ("%02d" % level) .. ".html", "w"))
		fd:write((html:gsub("${WALLS}", table.concat(lines, ""))))
		fd:close()
	end
end

return main(...)
