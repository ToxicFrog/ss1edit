#!/usr/bin/env lua5.2
-- :mode=lua: --

require "util"
local res = require "ss1.res"
local map = require "ss1.map"
local gamesys = require "ss1.gamesys"

local HELP_TEXT = [[
Usage: map <archive> <prefix> [levels...]

    <archive> is the path to ARCHIVE.DAT.
    <prefix> is the prefix for the generated map files; the map for
    level N will be named prefixNN.html.
    <levels> is a list of level numbers, from 0 to 15; if omitted,
    all levels will be mapped. (Level 0 is Deck R; levels 1-9 are
   	the corresponding decks, and 10-15 are cyberspace and groves)
]]

local output = {}

local function point(layer, x, y, colour, name)
	table.insert(output, "      point(%s, %f, %f, '%s', '%s');\n" % {
		layer, x, y, colour, name })
end

local function line(x1, y1, x2, y2, colour)
	table.insert(output, "      line(%f, %f, %f, %f, '%s');\n" % {
		x1, y1, x2, y2, colour })
end

local function commit()
	local buf = table.concat(output, "")
	output = {}
	return buf
end

local function drawLedges(map)
	for y=1,map.info.height-1 do
		for x=1,map.info.width-1 do
			for x2,y2 in pairs { [x] = y-1, [x-1] = y } do
				local delta = map:ledgeHeight(x, y, x2, y2)

				if delta > 0 and delta < math.huge then
					local shade = 0x40 + delta * 4
					line(x, y, x2+1, y2+1, "#00%02X00" % shade)
				end
			end
		end
	end
end

local function drawWalls(map)
	for y=1,map.info.height-1 do
		for x=1,map.info.width-1 do
			for x2,y2 in pairs { [x] = y-1, [x-1] = y } do
				local delta = map:ledgeHeight(x, y, x2, y2)

				if delta == math.huge then
					line(x, y, x2+1, y2+1, "#00FF30" % shade)
				end
			end

			-- diagonal walls don't need a ledge check
			local tile = map:tile(x,y)
			if tile.shape == 2 or tile.shape == 4 then -- / diagonal
				line(x, y, x+1, y+1, "#00FF30")
			elseif tile.shape == 3 or tile.shape == 5 then -- \ diagonal
				line(x+1, y, x, y+1, "#00FF30")
			end
		end
	end
end

local function infobox(obj)
	local template = [[
		<table>\
			<tr><th>ID</th><td>%d/%d/%d</td></tr>\
			<tr><th>Category</th><td>%s</td></tr>\
			<tr><th>Subcategory</th><td>%s</td></tr>\
			<tr><th>Name</th><td>%s</td></tr>\
			<tr><th>Position</th><td>(%.2f, %.2f, %.2f)</td></tr>\
			<tr><th>Rotation</th><td>(%d, %d, %d)</td></tr>\
			<tr><th>AI Index?</th><td>%d</td></tr>\
			<tr><th>HP?</th><td>%d</td></tr>\
		</table>\
	]]

	return template % {
		obj.class, obj.subclass, obj.type,
		gamesys.name(obj.class),
		gamesys.name(obj.class, obj.subclass),
		gamesys.name(obj.class, obj.subclass, obj.type),
		obj.x/256, obj.y/256, obj.z/256,
		obj.pitch, obj.yaw, obj.roll,
		obj.ai_maybe,
		obj.hp_maybe
	}
end

local function main(archive, prefix, ...)
	local levels = {...}

	if not prefix then
		print(HELP_TEXT)
		return
	end

	if #levels == 0 then
		levels = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
	end

	print("Loading template...")
	local html = io.open("map.html"):read("*a")

	print("Loading ARCHIVE.DAT...")
	local rf = res.load(archive)

	for _,level in ipairs(levels) do
		level = tonumber(level)
		assert(level and level >= 0 and level <= 15, "invalid level index")

		print("Writing level " .. level)
		map = map.load(rf, level)

		drawLedges(map)
		drawWalls(map)

		local colours = {
			"#FF0000", "#FF8080", "#FFFFFF", "#FF0080", -- weapons, ammo, projectiles, and explosives
			"#00FFFF", -- patches
			"#0000FF", "#0000FF", -- hardware and software
			"#FFFFFF", "#FFFFFF", -- scenery and trash
			"#808000", "#FFFF00", -- switches and doors
			"#FFFFFF", "#FFFFFF", "#A0A0A0", -- decorations, traps and containers
			"#800080" -- enemies
		}

		for _,obj in ipairs(map.objects) do
			if obj.used and colours[obj.class+1] then
				point('objLayers[%d]' % obj.class,
					obj.x/256,
					obj.y/256,
					colours[obj.class+1],
					infobox(obj))
			end

			-- FIXME is there a specific subclass for non-openable gratings and stuff?
			if obj.used and obj.class == 10 then -- openable doors
				if obj.pitch == 0 then
					if obj.yaw % 128 == 64 then
						line(obj.x/256, obj.y/256 - 0.5, obj.x/256, obj.y/256 + 0.5, "#FFFF00")
					else
						line(obj.x/256 - 0.5, obj.y/256, obj.x/256 + 0.5, obj.y/256, "#FFFF00")
					end
				else
					point('objLayers[%d]' % obj.class, obj.x/256, obj.y/256, '#FFFF00', infobox(obj))
				end
			end
		end

		local fd = assert(io.open(prefix .. ("%02d" % level) .. ".html", "w"))
		local data = {
			WIDTH = map.info.width;
			HEIGHT = map.info.height;
			SCALE = 16;
			WALLS = commit();
		}
		fd:write(html:interpolate(data))
		fd:close()
	end
end

return main(...)
