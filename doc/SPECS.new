================================================================================
	THE UNOFFICIAL SYSTEM SHOCK SPECIFICATIONS
================================================================================

	0.1 Table of Contents
	---------------------

0	DOCUMENT METADATA
	0.1 Table of contents
	0.2 Revision history

1	GENERAL FILE INFORMATION

2	THE GAMESYS

3	RESOURCE FILE FORMAT
	3.1 Resource file header
	3.2 Table of contents
	3.3 Subchunks
	3.4 Compression algorithm

4	MAPS

5	MISCELLANEOUS FORMATS
	5.1 Logs and other text
	5.2 Textures and sprites
	5.3 Audio
	5.4 3d models

	0.2 Revision History
	--------------------

2004?	Original copy written by Team TSSHP <tsshp.sourceforge.net>
2006	Cleanup started for ss1tools

 ==========================================
 THE UNOFFICIAL SYSTEM SHOCK SPECIFICATIONS
 ==========================================

2	GENERIC CHUNK TYPES

	2.1	Textures and sprites
		2.1.1	Bitmap header
		2.1.2	Bitmap compression
		2.1.3	Pixel 'Animation'

	2.2	Sounds

3	THE MAP ARCHIVE
		3.0.1	Level chunk list

	3.1	Level map
		3.1.1	Chunk xx02
		3.1.2	Chunk xx03
		3.1.3	The level information chunk
		3.1.4	The tile map
		3.1.6	The texture list

	3.2	Objects
		3.2.1	The master object table
		3.2.2	The object cross-reference table
		3.2.3	The weapons table, class 0
		3.2.4	The ammo table, class 1
		3.2.5	The projectile table, class 2
		3.2.6	The grenades / explosives table, class 3
		3.2.7	The patches table, class 4
		3.2.8	The hardware table, class 5
		3.2.9	The software / logs table, class 6
		3.2.10	The scenery / decorations table, class 7
		3.2.11	The items table, class 8
		3.2.12	The switches / panels table, class 9
		3.2.13	The doors / gratings table, class 10
		3.2.14	The animations table, class 11
		3.2.15	The traps and triggers table, class 12
		3.2.16	The containers table, class 13
		3.2.17	The critters table, class 14

4	OBJECT PROPERTIES

	4.0	WEAPONS TABLE, class 0
		4.0.0	SEMI-AUTO WEAPON TABLE, class 0/0
		4.0.1	AUTOMATIC WEAPON TABLE, class 0/1
		4.0.2	PROJECTILE WEAPON TABLE, class 0/2
		4.0.3	MELEE WEAPON TABLE, class 0/3
		4.0.4	ENERGY BEAM WEAPON TABLE, class 0/4
		4.0.5	ENERGY PROJECTILE WEAPON TABLE, class 0/5

	4.1	AMMO CLIP TABLE, class 1

	4.2	PROJECTILE TABLE, class 2
		4.2.0	TRACER TABLE, class 2/0
		4.2.1	PROJECTILE TABLE, class 2/1
		4.2.2	SEEKER TABLE, class 2/2

	4.3	GRENADES / EXPLOSIVES TABLE, class 3
		4.3.0	GRENADES TABLE, class 3/0
		4.3.1	EXPLOSIVES TABLE, class 3/1

	4.4	PATCHES TABLE, class 4

	4.5	HARDWARE TABLE, class 5

	4.6	SOFTS TABLE, class 6

	4.7	FIXTURES TABLE, class 7

	4.8	ITEMS TABLE, class 8
		4.8.0	Junk
		4.8.1	Debris
		4.8.2	Corpses
		4.8.3	Items
		4.8.4	Access cards
		4.8.5	Cyber items
		4.8.6	Stains
		4.8.7	Quest items

	4.9	SWITCHES TABLE, class 9
		4.9.0	Switches
		4.9.1	Receptacles
		4.9.2	Terminals
		4.9.3	Panels
		4.9.4	Vending
		4.9.5	Cybertoggles



================================================================================
	1	GENERAL FILE INFO
================================================================================

	FIXME - this section needs cleanup and completion - FIXME

	System Shock data files fall into two categories: cached and rarely-accessed
files which are left on the CD, and frequently-accessed files which are copied
onto the hard disk at install time and read from there.

	1.1 CD files
	------------
	
	These are always found in the directory cdrom/data/ on the CD.

archive.dat 	Level map archive (despite the extension, this is a res file)
bwtabl.dat		???
citalog.res		Audio logs (English)
citbark.res		Audio trap messages (English)
cutspal.res		Palettes for cutscenes
death.res		? death animation?
frnalog.res		Audio logs (French)
frnbark.res		Audio trap messages (French)
gamepal.res		In-game palette data
geralog.res		Audio logs (German)
gerbark.res		Audio trap messages (German)
gryntabl.dat
intro.res
ipal.dat		Colour cube
lofrintr.res	low-res intro movie (French)
logeintr.res	low-res intro movie (German)
lowdeth.res 	low-res death movie
lowend.res		low-res ending movie
lowintr.res 	low-res intro movie
mongtabl.dat
objart.res		Sprites for objects
objprop.dat		Object properties (generic and class-specific)
shadtabl.dat
splash.res		Splash screens
splshpal.res	Palettes for splash screens
start1.res
svfrintr.res	SVGA intro movie, (French)
svgadeth.res	SVGA death movie
svgaend.res 	SVGA ending movie
svgaintr.res	SVGA intro movie
svgeintr.res	SVGA into movie, (German)
textprop.dat	Texture properties
vidmail.res		Video mail
whyttabl.dat
win1.res


1.3.2 Hard-disc files

	These start off in directory hd/data/ of the CDROM, and are copied to the
data/ subdirectory of your System Shock install on the hard disc.

citmat.res		Textures for 3D object models
cybstrng.res	Game strings (English)
digifx.res		Sound FX
digiparm.bin
frnstrng.res	Game strings (French)
gamescr.res		HUD borders, fonts, buttons
gerstrng.res	Game strings (German)
handart.res		Graphics for wielded weapons
intro.res
mfdart.res		MFD icons (target/email/item display) (English)
mfdfrn.res		MFD icons (target/email/item display) (French)
mfdger.res		MFD icons (target/email/item display) (German)
obj3d.res		3D object models
objart2.res		Graphics for critters
objart3.res		Graphics for critters, decals and doors
objprop.dat		The gamesys; see chapter 2
sideart.res		Sidebar icons
texture.res		Map textures


 ---



2 GENERIC CHUNK TYPES
=====================


2.1 TEXTURES AND SPRITES
------------------------

Textures and sprites have content type 2 (bitmap) and use the following general
 format:


2.1.1 Bitmap header

The bitmap header is 28 bytes long, as follows.

0000	int32	??? always 0
0004	int16	??? compression?
0006	int16	???
0008	int16	width
000A	int16	height
000C	int16	??? always same as width
000E	int8	??? log2 width
000F	int8	??? log2 height
0010	int16	\
0012	int16	 \ These seem to be used for animation frames to keep the
0014	int16	 /  sprite centred.
0016	int16	/
0018	int32	??? always 0


2.1.2 Bitmap compression

A compressed (type 4) bitmap can be unpacked as follows:
	00 nn xx		write nn bytes of colour xx
	nn .. ..    0<nn<0x80	copy nn bytes direct
	80 00 00		skip rest of file (end of compressed data)
	80 mm nn    0<nn<0x80	skip (nn*256+mm) bytes (write transparencies)
	80 nn 80 .. ..		copy nn bytes direct
	80 mm nn    0x80<nn	copy ((nn&0x3f)*256+mm) bytes  
	nn	    0x80<nn	skip (nn&0x7f) bytes

Thanks to Joerg Fischer (jofis@cs.uni-sb.de) for kindly sending me the source
 code to his texture extractor (you can get it from the hackers' page at TTLG)
 which cleared up some questions I had about the bitmap format. Vasily Volkov
 (no known e-presence) also had a hand in the decompression. Joerg has asked
 that I not distribute the sources myself; email him direct if you want them.

Note that _all_ bitmaps are subchunks, even when there is only one bitmap
 stored in a chunk. This is presumably to simplify the loading logic.

Textures are uncompressed square bitmaps stored at 4 resolutions each: 16x16,
 32x32, 64x64 and 128x128. There are 273 textures stored, but some (a few) do
 not contain useful graphics. Chunks containing textures are:

	  76		16x16 textures   (sub-chunks 0-272)
	  77		32x32 textures   (sub-chunks 0-272)
	 707-979	64x64 textures   (one chunk each)
	1000-1272	128x128 textures (one chunk each)


2.1.3 Pixel 'Animation'

The 'animations' that appear with some textures (SHODAN's mail
images, hardware buttons, ...) are done by palette looping.
It seems that there are generally four steps.
Those I have yet found out:

??                      0x04 to 0x07
??                      0x08 to 0x0B
Sensaround:             0x0C to 0x0F
Motion Booster:         0x10 to 0x13
SHODAN:	seems to use   0x14 to 0x17
Jump Boots:             0x18 to 0x1B
??                      0x1C to 0x1F

ff1: Perhaps energy weapons are done the same way...
12052002, ff1: must be; furthermore the ones marked with ??
               also ought to be animated (guessed).
               0x00 to 0x03 I hardly think is one loop as it
               includes 'special' index 0x00











The 3D model file, obj3d.res
----------------------------

This file contains the model definitions for all 3D objects (not sprites).
Each model lives in its own chunk, of type 0x0F, of which it is subchunk 0.

Coordinates are (apparently) stored as 24.8 fixed-point numbers.

The model header consists of 8 bytes, followed by the instructions on how to
 draw the object:

	0000	byte[6] always 27 00 08 00 02 00
	0006	int16	no. faces

Models appear to be based around drawing commands:

0000	end of sub-hull
	0000	int16	command = 0x0000

0001	define face:
	0000	int16	command = 0x0001
	0002	int16	face length
	0004	3*fix	normal vector
	0010	3*fix	point on face
	001C	...	face drawing commands

0003	define multiple vertices
	0000	int16	command = 0x0003
	0002	int16	no. vertices
	0006	3*fix	first vertex
	0012	...	more vertices

0004	draw flat-shaded polygon:
	0000	int16	command = 0x0004
	0002	int16	no. vertices
	0004	n*int16	vertices (defined previously in file)

0005	set colour for flat shading
	0000	int16	command = 0x0005
	0002	int16	colour

0006	split plane??? this defines a plane and references 2 faces, but I don't know what
	 it's actually for
	0000	int16	command = 0x0006
	0002	3*fix	normal vector
	000E	3*fix	point on face
	001A	int16	left child offset  (from start of this command)
	001C	int16	right child offset (from start of this command)

000A	define vertex:
	0000	int16	command = 0x000A
	0002	int16	vertex no. to define
	0004	int16	reference vertex
	0006	fix	offset from reference in X direction

000B	define vertex: as 0x000A except offset is in Y direction
000C	define vertex: as 0x000A except offset is in Z direction

000D	define vertex: as 0x000A except 2 offsets X, Y
000E						  X, Z
000F						  Y, Z

0015	??? define initial vertex
	0000	int16	command = 0x0015
	0004	3*fix	vertex coords

001C	define colour and shade
	0000	int16	command = 0x001C
	0002	int16	colour
	0004	int16	shade

0025	define texture mapping:
	0000	int16	command = 0x0025
	0002	int16	no. vertices
	0004	int16	vertex no. of first vertex
		fix	texture u coord (fix16.16)
		fix	texture v coord (fix16.16)
	000E	int16	vertex no. of second vertex
		...

0026	plot texture-mapped face:
	0000	int16	command = 0x0026
	0002	int16	texture no. (stored in citmat.res 475-525)
	0004	int16	no. vertices
	0006	n*int16	vertex numbers



vidmail.res
-----------

Video mails. This file has 24 chunks:
- the first 12 (id 0A40 to 0A4B)
  contain the frames in subchunks
- the second 12 (id 0A4C to 0A57)
  are video information chunks (type 04) stored in
  one subchunk each

This I have yet found out about the videos:
- a framerate of about 10 per second
- some videos are split up into several parts (chunks)
- the TriOp init jingle is id 0A4A (the first part
  always played)
- the frames (bitmaps) contain huge areas of
  value 00 which means the previous pixel at
  this position has to be preserved.
  (ff1: But this is not always true as I found out...)
- the video info structure should store the information
  about keyframes (if there are such)


The video information structure (type 04)
I yet don't know what everything means;
it's of variable size since it contains a sub-table:

0000    int16       width of video (always 00C8)
0002    int16       height of video (always 0064)
0004    int16       corresponding chunk id of frames
0006    6xint8      ?? always 00
000C    int16       ?? (TriOp jingle: 0001
                         all other:    0000)
000E    nx5xint8    sub-table of n entries
mmmm    int16       'end tag' always 010C

The video info sub-table
This table seems to determine how frames should be rendered.
The from_ and to_ fields are inclusive;
the first entry has from_frame = 0 and
the last has to_frame = last frame

0000    int8     'video command' (my name for it, always 04)
0001    int8     from_frame
0002    int8     to_frame
0003    int8     ?? render operation? (*)
0004    int8     ?? flags? (contains 0x00 to 0x04) (*)

*) those last two bytes could be the frame time as Jim 
   suggested - but if that is true, where is the information
   how frames are drawn?

5.0 CLASS TREE



6.0 SIGNIFICANT CHUNKS
	0x0024	Long names
		- name is stored in subchunk index equal to class tree index
		- so the riot gun is at index 4 (starting from 0) and the
		- Skorpion at six
	0x086A	Texture names
	0x086B	"can't use foo" strings for textures
		- name is stored in subchunk equal to texture ID
	0x086D	Short names
		- as 0x0024

